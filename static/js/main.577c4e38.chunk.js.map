{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["MessagePack","require","initialize","decode","encode","a","fetch","res","arrayBuffer","buf","console","log","Buffer","from","FileEntry","ans","ind","this","props","data","x","push","key","className","showFuncs","join","name","React","Component","File","state","open","onClick","setState","Folder","children","d","Object","keys","length","App","info","getData","then","catch","r","type","id","checked","onChange","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.577c4e38.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//import * as mp from \"./clean.mp\";\n\nconst MessagePack = require(\"what-the-pack\");\nconst {encode, decode} = MessagePack.initialize(2**24);\n\nlet words = 0;\n\nasync function getData() {\n  let res = await fetch(\"clean.mp\");\n  let buf = await res.arrayBuffer();\n  console.log(buf);\n  return decode(MessagePack.Buffer.from(buf));\n}\n\ninterface AppState {\n  data: {\n    info: string\n  } | Array<any>;\n  showFuncs: boolean;\n}\n\ninterface FileEntryProps {\n  name: string;\n  data: any[];\n  showFuncs: boolean;\n}\n\nclass FileEntry extends React.Component<FileEntryProps> {\n  render() {\n    let ans = [];\n    let ind = 0;\n    for (let x of this.props.data) {\n      if (\"0\" in x) {\n        ans.push(<div key={ind++} className=\"text\">{x[0]}</div>);\n      }\n      if (\"1\" in x && this.props.showFuncs) {\n        ans.push(<div key={ind++} className=\"func\">F{x[1][0]}({x[1][1].join(\", \")})</div>)\n      }\n    }\n    return <div className=\"entry\">\n      <div className=\"name\">{this.props.name}</div>\n      <div className=\"val\">{ans}</div>\n    </div>\n  }\n}\n\ninterface FileProps {\n  name: string;\n  data: any[];\n  showFuncs: boolean;\n}\n\ninterface FileState {\n  open: boolean;\n}\n\nclass File extends React.Component<FileProps, FileState> {\n\n  constructor(props: FileProps) {\n    super(props);\n    this.state = {open: false};\n  }\n\n  render() {\n    let ans = null;\n    if (this.state.open) {\n      ans = [];\n      for (let x of this.props.data[0]) {\n        ans.push(<FileEntry key={x[0]} name={x[0]} data={x[1]} showFuncs={this.props.showFuncs} />)\n      }\n    }\n  \n    return <div className=\"file\">\n      <h1 onClick={() => this.setState({open: !this.state.open})}>{this.props.name}</h1>\n      {ans}\n    </div>\n  }\n\n}\n\ninterface FolderProps {\n  name: string;\n  data: any[];\n  showFuncs: boolean;\n}\n\ninterface FolderState {\n  open: boolean;\n}\n\nclass Folder extends React.Component<FolderProps, FolderState> {\n\n  constructor(props: FolderProps) {\n    super(props);\n    this.state = {open: false};\n  }\n\n  render() {\n    let children = null;\n    let d = this.props.data;\n    if (this.state.open) {\n      children = [];\n      for (let name of Object.keys(d[0])) {\n        children.push(<Folder key={children.length} name={name} data={d[0][name]} showFuncs={this.props.showFuncs} />);\n      }\n      for (let name of Object.keys(d[1])) {\n        children.push(<File key={children.length} name={name} data={d[1][name]} showFuncs={this.props.showFuncs} />);\n      }\n    }\n    return <div className=\"folder\">\n      <h1 onClick={() => this.setState({open: !this.state.open})}>{this.props.name}</h1>\n        <div className=\"children\">\n          {children}\n        </div>\n    </div>\n  }\n}\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {data: {info: \"loading\"}, showFuncs: true};\n    \n  }\n\n  componentDidMount() {\n    getData().then(d => {\n      this.setState({data: d});\n    }).catch(r => {\n      console.log(r);\n    });\n  }\n\n\n  render() {\n    if (\"info\" in this.state.data) {\n      return <div>Loading</div>\n    }\n    return <div>\n      <input type=\"checkbox\" id=\"showFuncs\" checked={this.state.showFuncs} onChange={() => this.setState({showFuncs: !this.state.showFuncs})}></input>\n      <label htmlFor=\"showFuncs\">Show Functions</label>\n      <Folder name=\"/\" data={this.state.data} showFuncs={this.state.showFuncs} />\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}